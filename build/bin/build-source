#!/bin/bash

set -o errexit
set -o xtrace

. $(dirname $0)/vars

clone_repo() {
    ROOT_DIR=$1
    GIT_REPO=$2
    BRANCH=${3:-master}
    REP_TYPE=$4

    if [ ! -d "${ROOT_DIR}" ]; then
        git clone "${GIT_REPO}" "${ROOT_DIR}"
    fi

    pushd $ROOT_DIR
        if [ -n "${GIT_REPO}" ]; then
            git remote set-url origin "${GIT_REPO}"
            git fetch --all
        fi

        git reset --hard
        git clean -xdf

        BRANCH='master'

        if [ -n "$REP_TYPE" ]; then
            BRANCH=$(git tag -l "$BRANCH" | sort -r | head -n 1)
        fi

        if [ -n "${BRANCH}" ]; then
            git checkout "${BRANCH}"
        fi

        if [ -n "${GIT_REPO}" -a -n "${BRANCH}" ]; then
            git pull origin ${BRANCH}
        fi
        git rev-parse --short HEAD > shortCommit
    popd

    return
}

prepare_tarball() {
    local repo_name=$1
    
    mkdir -p ${root_dir}/sources_dir
    git_dir="${root_dir}/sources_dir/${repo_name}-${percona_dbaas_cli_version}"

    clone_repo ${git_dir} ${percona_dbaas_cli_repo} ${percona_dbaas_cli_branch}

    local commit=$(git -C "${git_dir}" rev-parse --short HEAD)
    local tarball=${source_dir}/${repo_name}-${percona_dbaas_cli_version}.tar.gz
    local repo_var=$(
        echo "${repo_name}_commit" \
            | sed -e 's:-:_:g' \
            | tr '[[:lower:]]' '[[:upper:]]'
    )
    echo "${repo_var}=$commit" >> ${properties_file}

    prepare_external_tarball 'https://github.com/kubernetes/kubernetes' ${kubernetes_version}

    mv ${root_dir}/sources_dir/kubernetes "${git_dir}/"

    if [ -f "${tarball}" ]; then
        echo ${tarball} already exists, skipping build
    else
        tar -C sources_dir --exclude=.* -zcf ${source_tarball} ${repo_name}-${percona_dbaas_cli_version}
    fi
}

prepare_external_tarball() {
    local repo_url=$1
    local tag=$(echo $2 | sed -e 's:x:?:g')
    
    local repo_name=$(echo "$repo_url" | awk -F'/' '{print $NF}')
    local git_dir="${root_dir}/sources_dir/${repo_name}"
    
    mkdir -p ${root_dir}/sources_dir

    clone_repo ${git_dir} ${repo_url} ${tag} 'external'
}

main() {
    rm -rf ${root_dir}/results/source_tarball/*
    mkdir -p $(dirname ${source_tarball}) || :
    echo "REVISION=$(git rev-parse --short HEAD)" > ${properties_file}

    prepare_tarball percona-dbaas-cli
}

main
exit 0
