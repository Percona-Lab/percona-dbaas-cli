#!/bin/bash

set -o errexit
set -o xtrace

export TEST_DIR=$(realpath $(dirname $0))
export SRC_DIR="$(realpath ${TEST_DIR}/../../)"
. ${TEST_DIR}/../functions

NAMESPACE="pxc-${RANDOM}"
OPERATOR_IMAGE_TO_UPDATE="perconalab/percona-xtradb-cluster-operator:master"
PROXYSQL_IMAGE_TO_UPDATE="${OPERATOR_IMAGE_TO_UPDATE}-proxysql"
PXC_IMAGE_TO_UPDATE="${OPERATOR_IMAGE_TO_UPDATE}-pxc"

S3_BUCKET="operator-testing"
S3_SECRET="minio-service"
S3_ENDPOINT="http://minio-service:9000/"
S3_REGION="us-east-1"

CLUSTER=test-cluster
PASS=''
BACKUP_NAME=''

init() {
	export PATH="${SRC_DIR}/build/_output/bin":${PATH}

	deploy_helm "${NAMESPACE}"
	deploy_minio
	kubectl apply -f "${TEST_DIR}/conf/client.yaml"
}

create() {
	local LAST_OUT="$(mktemp)"
	desc pxc cluster creation
	percona-dbaas --demo pxc create "${CLUSTER}" --s3-skip-storage --proxy-anti-affinity-key none  --pxc-anti-affinity-key none > "${LAST_OUT}"
	PASS=$(grep 'Pass:' "${LAST_OUT}" | cut -d' ' -f2)

	compare_kubectl statefulset/"${CLUSTER}"-pxc

	run_mysql \
        'CREATE DATABASE IF NOT EXISTS myApp; use myApp; CREATE TABLE IF NOT EXISTS myApp (id int PRIMARY KEY);' \
        "-h ${CLUSTER}-pxc -uroot -p${PASS}"
    run_mysql \
        'INSERT myApp.myApp (id) VALUES (100500)' \
        "-h ${CLUSTER}-pxc -uroot -p${PASS}"
}

add_storage() {
	desc add storage to existing cluster
	percona-dbaas --demo pxc add-storage "${CLUSTER}" \
					    --s3-bucket "${S3_BUCKET}" \
						--s3-key some-secret-key \
						--s3-key-id some-access-key \
					    --s3-endpoint-url "${S3_ENDPOINT}" \
					    --s3-region "${S3_REGION}"

	bucket_name=$(kubectl_bin  get pxc "${CLUSTER}" -o jsonpath='{.spec.backup.storages.defaultS3Storage.s3.bucket}')
	endpoint=$(kubectl_bin  get pxc "${CLUSTER}" -o jsonpath='{.spec.backup.storages.defaultS3Storage.s3.endpointUrl}')
	region=$(kubectl_bin  get pxc "${CLUSTER}" -o jsonpath='{.spec.backup.storages.defaultS3Storage.s3.region}')

	if [[ ${bucket_name} != ${S3_BUCKET} || ${endpoint} != ${S3_ENDPOINT} || ${region} != ${S3_REGION} ]]; then
		echo "S3 bucket settings has not been provisioned"
		exit 1
	fi
}

edit() {
	desc increasing the number of replicas
	target_size=4
	percona-dbaas --demo pxc edit "${CLUSTER}" --proxy-instances ${target_size} --pxc-instances ${target_size}
	if [[ $(kubectl_bin  get statefulset "${CLUSTER}-pxc" -o jsonpath='{.status.replicas}') -ne $((target_size+1)) \
		  || $(kubectl_bin  get statefulset "${CLUSTER}-proxysql" -o jsonpath='{.status.replicas}') -ne ${target_size} ]]; then
		echo "Custer nodes has not been resized accordingly."
		exit 1
	fi
	percona-dbaas --demo pxc edit "${CLUSTER}" --proxy-instances 3 --pxc-instances 3
}

list() {
	local LAST_OUT="$(mktemp)"
	desc listing pxc clusters
	percona-dbaas --demo pxc list > "${LAST_OUT}"
	cluster_name=$(grep -o "${CLUSTER}" "${LAST_OUT}")
	if [[ ${cluster_name} == '' ]]; then
		echo "Can't find ${CLUSTER} created"
		exit 1
	fi
}

upgrade() {
	desc upgrading pxc cluster
	percona-dbaas --demo pxc upgrade "${CLUSTER}" master \
				  --operator-image "${OPERATOR_IMAGE_TO_UPDATE}" \
				  --proxysql-image "${PROXYSQL_IMAGE_TO_UPDATE}" \
				  --pxc-image "${PXC_IMAGE_TO_UPDATE}"


	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc

	current_proxysql_image=$(kubectl_bin  get statefulset test-cluster-proxysql -o jsonpath='{.spec.template.spec.containers[?(@.name == "proxysql")].image}')
	current_pxc_image=$(kubectl_bin  get statefulset test-cluster-pxc -o jsonpath='{.spec.template.spec.containers[?(@.name == "pxc")].image}')


	if [[ ${current_proxysql_image} != "${PROXYSQL_IMAGE_TO_UPDATE}" || ${current_pxc_image} != "${PXC_IMAGE_TO_UPDATE}" ]]; then
		echo "Cluster has not been updated"
		exit 1
	fi
}

create_backup() {
	local LAST_OUT="$(mktemp)"
	desc create backup
	percona-dbaas --demo pxc create-backup "${CLUSTER}" > "${LAST_OUT}"
	BACKUP_NAME=$(grep 'Name:' "${LAST_OUT}" | cut -d' ' -f2)
	if [[ $(kubectl_bin  get pxc-backup "${BACKUP_NAME}" -o jsonpath='{.status.state}') != "Succeeded" ]]; then
		echo "Backup creation has been failed."
		exit 1
	fi
}

restore_bakup() {
	backup_name=$1
	local LAST_OUT="$(mktemp)"
	desc restore backup
	run_mysql \
        'INSERT myApp.myApp (id) VALUES (100501)' \
        "-h ${CLUSTER}-pxc -uroot -p${PASS}"
    compare_mysql_cmd "select-2" "SELECT * from myApp.myApp;" "-h ${CLUSTER}-pxc-0.${CLUSTER}-pxc -uroot -p${PASS}"

	percona-dbaas --demo pxc restore-backup "${CLUSTER}" "${backup_name}" > "${LAST_OUT}"
	RESTORE_NAME=$(grep 'Name:' "${LAST_OUT}"| cut -d' ' -f2)
	if [[ $(kubectl_bin  get pxc-restore "${RESTORE_NAME}" -o jsonpath='{.status.state}') != "Succeeded" ]]; then
		echo "Restore process has been failed."
		exit 1
	fi

	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc
	sleep 10
	wait_cluster_consistency "${CLUSTER}" 3 pxc

	compare_mysql_cmd "select-1" "SELECT * from myApp.myApp;" "-h ${CLUSTER}-pxc-0.${CLUSTER}-pxc -uroot -p${PASS}"

}

delete() {
	desc deleting pxc cluster
	percona-dbaas --demo pxc delete "${CLUSTER}"
	status=$(kubectl_bin  get pxc "${CLUSTER}" -o jsonpath='{.metadata.name}' || :)

    if [[ ${status} != '' ]]; then
    	echo "Test has been failed. Cluster ${CLUSTER} still exists."
    	exit 1
    fi
}

init
create
add_storage
edit
list
create_backup
restore_bakup "${BACKUP_NAME}"
upgrade
delete
destroy "${NAMESPACE}"
